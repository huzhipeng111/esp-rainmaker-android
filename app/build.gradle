plugins {
    id 'com.android.application'
    id 'com.google.protobuf'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'kotlin-android'
    id 'org.jetbrains.kotlin.android'
    id "dagger.hilt.android.plugin"
    id "org.jetbrains.kotlin.kapt"
    id "com.google.dagger.hilt.android"
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def defaultAppName = "Panlee+"
def defaultTransport = "Both"
def defaultSecurity = "2"
def defaultPoP = ""
def defaultPrefix = "Nova_"
def defaultWiFiScanSrc = "Device"
def defaultSec2Username = "wifiprov"

def defaultClientId = "3iq92pegc6t71d3j87bfnncc6d"

//def defaultBaseUrl = "https://api.rainmaker.espressif.com"
def defaultBaseUrl = "https://dvz4pmir83.execute-api.us-east-1.amazonaws.com/dev"
def defaultClaimBaseUrl = "https://esp-claiming.rainmaker.espressif.com"

def defaultAuthUrl = "https://auth.rainmaker.espressif.com/oauth2"
def defaultRedirectUri = "rainmaker://com.espressif.rainmaker/success"
def gitHubIdentityProvider = "GitHub"
def googleIdentityProvider = "Google"

def defaultDocUrl = "https://rainmaker.espressif.com/"
def defaultPrivacyUrl = "https://rainmaker.espressif.com/docs/privacy-policy.html"
def defaultTermsOfUseUrl = "https://rainmaker.espressif.com/docs/terms-of-use.html"

def defaultUserPool = "2"
def matterBuild = false

def localProperties = new Properties()
localProperties.load(new FileInputStream(rootProject.file("local.properties")))

android {

    compileSdkVersion 33

    defaultConfig {
        applicationId "com.wireless.demo"
        minSdkVersion 27
        targetSdkVersion 33
        versionCode 114
        versionName "3.2.2 - ${getGitHash()}"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "GitHash", "\"${getGitHash()}\""

        resValue "string", "app_name", localProperties.getProperty("appName", defaultAppName)
        buildConfigField "String", "POP", '"' + localProperties.getProperty("POP", defaultPoP) + '"'

        def transport = localProperties.getProperty("transport", defaultTransport)
        if (transport == null) {
            throw new GradleException("Transport not found. Define transport in the local.properties file.")
        } else if (!transport.equalsIgnoreCase("SoftAP") && !transport.equalsIgnoreCase("BLE") && !transport.equalsIgnoreCase("Both")) {
            throw new GradleException("Invalid 'transport' value. Please check 'transport' value in local.properties file.")
        } else {
            buildConfigField "String", "TRANSPORT", '"' + transport + '"'
        }

        def security = localProperties.getProperty("security", defaultSecurity)
        if (security == null) {
            throw new GradleException("Security not found. Define security in the local.properties file.")
        } else if (!security.equalsIgnoreCase("0") && !security.equalsIgnoreCase("1") && !security.equalsIgnoreCase("2")) {
            throw new GradleException("Invalid 'security' value. Please check 'security' value in local.properties file.")
        } else {
            buildConfigField "String", "SECURITY", '"' + security + '"'
        }

        def wifiScanSrc = localProperties.getProperty("wifiScanSource", defaultWiFiScanSrc)
        if (wifiScanSrc == null) {
            throw new GradleException("WiFi scan source not found. Define it in the local.properties file.")
        } else if (!wifiScanSrc.equalsIgnoreCase("Device") && !wifiScanSrc.equalsIgnoreCase("Phone")) {
            throw new GradleException("Invalid 'wifiScanSource' value. Please check 'wifiScanSource' value in local.properties file.")
        } else {
            buildConfigField "String", "WIFI_SCAN_SRC", '"' + wifiScanSrc + '"'
        }

        buildConfigField "String", "SECURITY_2_USERNAME", '"' + localProperties.getProperty("security2Username", defaultSec2Username) + '"'

        buildConfigField "boolean", "isFilterPrefixEditable", localProperties.getProperty("isFilterPrefixEditable", "true")
        buildConfigField "String", "DEVICE_NAME_PREFIX", '"' + localProperties.getProperty("deviceNamePrefix", defaultPrefix) + '"'

        buildConfigField "boolean", "isQRCodeSupported", localProperties.getProperty("isQRCodeSupported", "true")
        buildConfigField "boolean", "isScheduleSupported", localProperties.getProperty("isScheduleSupported", "true")
        buildConfigField "boolean", "isSceneSupported", localProperties.getProperty("isSceneSupported", "true")
        buildConfigField "boolean", "isLocalControlSupported", localProperties.getProperty("isLocalControlSupported", "true")
        buildConfigField "boolean", "isNodeGroupingSupported", localProperties.getProperty("isNodeGroupingSupported", "true")
        buildConfigField "boolean", "isNodeSharingSupported", localProperties.getProperty("isNodeSharingSupported", "true")
        buildConfigField "boolean", "isAutomationSupported", localProperties.getProperty("isAutomationSupported", "true")
        buildConfigField "boolean", "isOtaSupported", localProperties.getProperty("isOtaSupported", "false")
        buildConfigField "boolean", "isMatterSupported", localProperties.getProperty("isMatterSupported", "false")

        //---Enable Continuous Updates---//
        buildConfigField "boolean", "isContinuousUpdateEnable", localProperties.getProperty("isContinuousUpdateEnable", "true")

        def defaultInterval = localProperties.getProperty("continuosUpdateInterval", "100")
        buildConfigField 'int', 'continuosUpdateInterval', String.valueOf(defaultInterval)
        //-------------------------------//

        def clientId = localProperties.getProperty("clientId", defaultClientId)
        def authUrl = localProperties.getProperty("authUrl", defaultAuthUrl)
        def redirectUri = localProperties.getProperty("redirectUri", defaultRedirectUri)

        buildConfigField "String", "CLIENT_ID", '"' + clientId + '"'

        buildConfigField "String", "BASE_URL", '"' + localProperties.getProperty("baseUrl", defaultBaseUrl) + '"'
        buildConfigField "String", "CLAIM_BASE_URL", '"' + localProperties.getProperty("claimBaseUrl", defaultClaimBaseUrl) + '"'

        buildConfigField "String", "AUTH_URL", '"' + authUrl + '"'
        buildConfigField "String", "TOKEN_URL", '"' + authUrl + "/token" + '"'
        buildConfigField "String", "REDIRECT_URI", '"' + redirectUri + '"'

        def gitHubUrl = authUrl + "/authorize?identity_provider=" + gitHubIdentityProvider +
                "&redirect_uri=" + redirectUri + "&response_type=CODE&client_id=" + clientId
        def googleUrl = authUrl + "/authorize?identity_provider=" + googleIdentityProvider +
                "&redirect_uri=" + redirectUri + "&response_type=CODE&client_id=" + clientId

        buildConfigField "String", "GITHUB_URL", '"' + gitHubUrl + '"'
        buildConfigField "String", "GOOGLE_URL", '"' + googleUrl + '"'

        buildConfigField "String", "DOCUMENTATION_URL", '"' + localProperties.getProperty("docUrl", defaultDocUrl) + '"'
        buildConfigField "String", "PRIVACY_URL", '"' + localProperties.getProperty("privacyUrl", defaultPrivacyUrl) + '"'
        buildConfigField "String", "TERMS_URL", '"' + localProperties.getProperty("termsOfUseUrl", defaultTermsOfUseUrl) + '"'

        // Alexa App Linking Configurations
        buildConfigField "String", "ALEXA_CLIENT_ID", '"' + localProperties.getProperty("alexaClientId") + '"'
        buildConfigField "String", "ALEXA_CLIENT_SECRET", '"' + localProperties.getProperty("alexaClientSecret") + '"'
        buildConfigField "String", "ALEXA_REDIRECT_URL", '"' + localProperties.getProperty("alexaRedirectUrl") + '"'
        buildConfigField "String", "ALEXA_RM_CLIENT_ID", '"' + localProperties.getProperty("alexaRMClientId") + '"'
        buildConfigField "String", "SKILL_ID", '"' + localProperties.getProperty("skillId") + '"'
        buildConfigField "String", "SKILL_STAGE", '"' + localProperties.getProperty("skillStage") + '"'
        buildConfigField "String", "ALEXA_ACCESS_TOKEN_URL", '"' + localProperties.getProperty("alexaAccessTokenUrl") + '"'

        // User pool selection
        def userPool = localProperties.getProperty("userPool", defaultUserPool)
        buildConfigField "String", "USER_POOL", '"' + userPool + '"'
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes {
        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            debuggable true
        }
    }

    sourceSets {
        main {
            if (matterBuild) {
                jniLibs.srcDirs = ['third_party/connectedhomeip/libs/jniLibs']
            }
        }
    }

    namespace 'com.espressif.rainmaker'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.21.9'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}

dependencies {

    // Native libs
    implementation fileTree(dir: "third_party/connectedhomeip/libs", include: ["*.jar", "*.so"])

    // Connected Home
    implementation "com.google.android.gms:play-services-base:18.2.0"
    implementation "com.google.android.gms:play-services-home:16.0.0"
    implementation 'com.google.android.gms:play-services-threadnetwork:16.0.0'

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation "androidx.browser:browser:1.3.0"

    implementation 'com.google.protobuf:protobuf-javalite:3.18.0'
    implementation 'com.google.crypto.tink:tink-android:1.6.1'

    implementation 'org.greenrobot:eventbus:3.3.1'
    implementation 'com.auth0.android:jwtdecode:1.4.0'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.5.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'

    implementation 'com.github.firdausmaulan:AVLoadingIndicatorView:2.3.0'
    implementation 'com.larswerkman:HoloColorPicker:1.5'
    implementation 'com.aventrix.jnanoid:jnanoid:2.0.0'
    implementation 'com.github.yuriy-budiyev:code-scanner:2.1.2'
    implementation 'com.github.espressif:esp-idf-provisioning-android:lib-2.1.2'
    implementation 'com.github.warkiz.tickseekbar:tickseekbar:0.1.4'
    implementation 'com.github.abdularis:TapHoldUpButton:0.1.2'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    implementation 'info.hoang8f:android-segmented:1.0.6'
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.25'

    // Room dependencies
    def room_version = "2.5.2"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    def work_version = "2.7.1"
    implementation "androidx.work:work-runtime:$work_version"

    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:30.0.0')
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.android.gms:play-services-gcm:17.0.0'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-rx2:1.5.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.5.2'
    implementation 'commons-codec:commons-codec:1.16.0'

    // Hilt
    // https://dagger.dev/hilt/gradle-setup
    implementation 'com.google.dagger:hilt-android:2.44.2'
    implementation 'com.google.ar:core:1.35.0'
    kapt 'com.google.dagger:hilt-compiler:2.44.2'

    //crypto
    implementation "org.bouncycastle:bcpkix-jdk15to18:1.72"
    implementation 'org.bouncycastle:bcprov-jdk15to18:1.72'
}
